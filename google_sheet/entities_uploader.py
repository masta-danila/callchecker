import json
import gspread_asyncio
import gspread
from google.oauth2.service_account import Credentials
from typing import Dict, List, Tuple
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
SERVICE_ACCOUNT_FILE = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', 'bitrix24/google_sheets_credentials.json')

async def get_google_sheets_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    agcm = gspread_asyncio.AsyncioGspreadClientManager(
        lambda: Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    )
    return await agcm.authorize()

def load_portal_configs() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–æ–≤ –∏–∑ bitrix24/bitrix_portals.json."""
    with open('bitrix24/bitrix_portals.json', 'r') as f:
        data = json.load(f)
        return data.get('portals', [])

def calculate_evaluation_from_entity_data(entity_criteria_data: List[Dict], criteria_metadata: List[Dict]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å evaluate_criterion=True –∏ include_in_score=True.
    
    :param entity_criteria_data: –î–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏ (data['criteria'])
    :param criteria_metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã criteria
    :return: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –¥–æ –¥–µ—Å—è—Ç—ã—Ö
    """
    evaluations = []
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ ID
    criteria_meta_dict = {c['id']: c for c in criteria_metadata}
    
    for entity_criterion in entity_criteria_data:
        criterion_id = entity_criterion.get('id')
        criterion_meta = criteria_meta_dict.get(criterion_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è
        if (criterion_meta.get('evaluate_criterion', False) and 
            criterion_meta.get('include_in_score', False) and
            criterion_meta.get('include_in_entity_description', False)):
            
            eval_value = entity_criterion.get('evaluation')
            if isinstance(eval_value, (int, float)):
                evaluations.append(eval_value)
    
    return round(sum(evaluations) / len(evaluations), 1) if evaluations else 0.0

def prepare_entities_data(portal_data: Dict) -> Tuple[List[str], List[List]]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Sheets."""
    entities = portal_data.get('entities', [])
    criteria = portal_data.get('criteria', [])

    if not entities:
        return [], []

    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['id', 'crm_entity_type', 'name', 'evaluation', 'summary']

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (—Ç–æ–ª—å–∫–æ —Å include_in_entity_description=True)
    entity_criteria = [c for c in criteria if c.get('include_in_entity_description', False)]
    for criterion in entity_criteria:
        criterion_name = criterion['name']
        headers.append(criterion_name)  # –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è
        if criterion.get('evaluate_criterion', False):
            headers.append('')  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –æ—Ü–µ–Ω–∫–∏

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID
    sorted_entities = sorted(entities, key=lambda x: x.get('id', 0), reverse=False)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    rows = []
    for entity in sorted_entities:
        row = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–ø—Ä–∏–≤–æ–¥–∏–º ID –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Google Sheets)
        row.append(str(entity.get('id', '')))
        row.append(entity.get('crm_entity_type', ''))
        
        # –ò–º—è —Å—É—â–Ω–æ—Å—Ç–∏ (title + name + lastname)
        title = entity.get('title', '') or ''
        name = entity.get('name', '') or ''
        lastname = entity.get('lastname', '') or ''
        name_parts = [part for part in [title, name, lastname] if part and part != 'None']
        entity_full_name = ' '.join(name_parts) if name_parts else f'–°—É—â–Ω–æ—Å—Ç—å {entity.get("id", "")}'
        row.append(entity_full_name)
        
        # –í—ã—á–∏—Å–ª—è–µ–º evaluation
        entity_criteria_list = entity.get('data', {}).get('criteria', [])
        evaluation = calculate_evaluation_from_entity_data(entity_criteria_list, criteria)
        row.append(evaluation)
        
        # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        row.append(entity.get('summary', '') or '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (—Ç–æ–ª—å–∫–æ —Å include_in_entity_description=True)
        entity_criteria_dict = {ec.get('id'): ec for ec in entity_criteria_list}
        
        for criterion in entity_criteria:
            criterion_id = criterion['id']
            entity_criterion_data = entity_criteria_dict.get(criterion_id, {})
            
            # –¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è (–µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
            text_value = entity_criterion_data.get('text', '') if criterion.get('show_text_description', False) else ''
            row.append(text_value)
            
            # –û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if criterion.get('evaluate_criterion', False):
                eval_value = entity_criterion_data.get('evaluation', '')
                row.append(eval_value if eval_value is not None else '')
        
        rows.append(row)

    return headers, rows

async def get_or_create_worksheet(spreadsheet, sheet_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    try:
        worksheet = await spreadsheet.worksheet(sheet_name)
        print(f"üìÑ –õ–∏—Å—Ç '{sheet_name}' –Ω–∞–π–¥–µ–Ω")
        return worksheet
    except gspread.exceptions.WorksheetNotFound:
        worksheet = await spreadsheet.add_worksheet(title=sheet_name, rows=100, cols=50)
        print(f"üìÑ –õ–∏—Å—Ç '{sheet_name}' —Å–æ–∑–¥–∞–Ω")
        return worksheet

async def analyze_existing_worksheet(worksheet) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤."""
    all_values = await worksheet.get_all_values()
    if not all_values:
        return {'is_empty': True, 'existing_headers': [], 'existing_data': []}

    existing_headers = all_values[0] if all_values else []
    existing_data = all_values[1:] if len(all_values) > 1 else []
    
    return {
        'is_empty': len(existing_data) == 0,
        'existing_headers': existing_headers,
        'existing_data': existing_data
    }

def filter_new_entities(new_rows: List[List], existing_data: List[List]) -> List[List]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ (–ø–æ ID)."""
    if not existing_data:
        return new_rows

    existing_ids = {row[0] for row in existing_data if row and len(row) > 0}
    filtered_rows = []

    for row in new_rows:
        entity_id = row[0] if row else None
        if entity_id and entity_id in existing_ids:
            continue
        else:
            filtered_rows.append(row)

    original_count = len(new_rows)
    filtered_count = len(filtered_rows)
    duplicate_count = original_count - filtered_count
    
    print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: {original_count} –≤—Å–µ–≥–æ, {filtered_count} –Ω–æ–≤—ã—Ö, {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    return filtered_rows

def find_updated_entities(new_rows: List[List], existing_data: List[List]) -> List[Tuple[int, List]]:
    """–ù–∞—Ö–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if not existing_data:
        return []

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
    existing_dict = {}
    for i, row in enumerate(existing_data):
        if row and len(row) > 0:
            existing_dict[row[0]] = (i + 2, row)  # +2 –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ 1-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

    updated_entities = []
    for new_row in new_rows:
        entity_id = new_row[0] if new_row else None
        if entity_id and entity_id in existing_dict:
            row_index, existing_row = existing_dict[entity_id]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if new_row != existing_row:
                updated_entities.append((row_index, new_row))

    print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(updated_entities)} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π")
    return updated_entities

async def apply_header_and_formatting(worksheet, headers: List[str], spreadsheet):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É."""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await worksheet.update('1:1', [headers])
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    requests = []
    
    # 1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∑–∞–ª–∏–≤–∫–∞ #e5e5e5)
    requests.append({
        "repeatCell": {
            "range": {
                "sheetId": worksheet.id,
                "startRowIndex": 0,
                "endRowIndex": 1,
                "startColumnIndex": 0,
                "endColumnIndex": len(headers)
            },
            "cell": {
                "userEnteredFormat": {
                    "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9},
                    "textFormat": {"bold": True}
                }
            },
            "fields": "userEnteredFormat(backgroundColor,textFormat)"
        }
    })
    
    # 2. –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    requests.append({
        "updateSheetProperties": {
            "properties": {
                "sheetId": worksheet.id,
                "gridProperties": {
                    "frozenRowCount": 1
                }
            },
            "fields": "gridProperties.frozenRowCount"
        }
    })
    
    # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞
    requests.append({
        "setBasicFilter": {
            "filter": {
                "range": {
                    "sheetId": worksheet.id,
                    "startRowIndex": 0,
                    "endRowIndex": 1000,
                    "startColumnIndex": 0,
                    "endColumnIndex": len(headers)
                }
            }
        }
    })
    
    # 4. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é, –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é –∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
    requests.append({
        "repeatCell": {
            "range": {
                "sheetId": worksheet.id,
                "startRowIndex": 0,
                "endRowIndex": 1000,
                "startColumnIndex": 0,
                "endColumnIndex": len(headers)
            },
            "cell": {
                "userEnteredFormat": {
                    "horizontalAlignment": "LEFT",
                    "verticalAlignment": "TOP",
                    "wrapStrategy": "WRAP"
                }
            },
            "fields": "userEnteredFormat(horizontalAlignment,verticalAlignment,wrapStrategy)"
        }
    })
    
    # 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    column_widths = {
        'id': 150,
        'crm_entity_type': 150,
        'name': 150,
        'evaluation': 150,
        'summary': 250
    }
    
    for i, header in enumerate(headers):
        if header == '':
            # –ö–æ–ª–æ–Ω–∫–∞ –æ—Ü–µ–Ω–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            width = 50
        else:
            # –û–±—ã—á–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
            width = column_widths.get(header, 250)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 250 –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        
        requests.append({
            "updateDimensionProperties": {
                "range": {
                    "sheetId": worksheet.id,
                    "dimension": "COLUMNS",
                    "startIndex": i,
                    "endIndex": i + 1
                },
                "properties": {
                    "pixelSize": width
                },
                "fields": "pixelSize"
            }
        })
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º batch-–∑–∞–ø—Ä–æ—Å
    await spreadsheet.batch_update({"requests": requests})
    print("üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: —à–∞–ø–∫–∞, —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫, —Ñ–∏–ª—å—Ç—Ä—ã, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ")

async def insert_entities_batch(worksheet, rows: List[List], spreadsheet):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –ª–∏—Å—Ç –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö."""
    if not rows:
        print("üìù –ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return

    all_values = await worksheet.get_all_values()
    start_row = len(all_values) + 1 if all_values else 1

    # –†–∞—Å—à–∏—Ä—è–µ–º –ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    needed_rows = start_row + len(rows) - 1
    if needed_rows > worksheet.row_count:
        await worksheet.add_rows(needed_rows - worksheet.row_count)

    requests = []
    for row_idx, row in enumerate(rows):
        current_row = start_row + row_idx
        for col_idx, cell_value in enumerate(row):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
            user_value = {}
            if isinstance(cell_value, (int, float)):
                user_value = {"numberValue": float(cell_value)}
            elif cell_value is None or cell_value == '':
                user_value = {"stringValue": ""}
            else:
                user_value = {"stringValue": str(cell_value)}

            requests.append({
                "updateCells": {
                    "range": {
                        "sheetId": worksheet.id,
                        "startRowIndex": current_row - 1,  # 0-based
                        "endRowIndex": current_row,
                        "startColumnIndex": col_idx,
                        "endColumnIndex": col_idx + 1
                    },
                    "rows": [{
                        "values": [{
                            "userEnteredValue": user_value
                        }]
                    }],
                    "fields": "userEnteredValue"
                }
            })

    # –í—ã–ø–æ–ª–Ω—è–µ–º batch-–∑–∞–ø—Ä–æ—Å –ø–æ —á–∞—Å—Ç—è–º (–ª–∏–º–∏—Ç API)
    if requests:
        chunk_size = 100  # –õ–∏–º–∏—Ç API
        for i in range(0, len(requests), chunk_size):
            chunk = requests[i:i + chunk_size]
            await spreadsheet.batch_update({"requests": chunk})
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(rows)} —Å—É—â–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ batch API")

async def update_entities_row_by_row(worksheet, updated_entities: List[Tuple[int, List]], spreadsheet):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ."""
    if not updated_entities:
        print("üîÑ –ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    print(f"üîÑ –û–±–Ω–æ–≤–ª—è—é {len(updated_entities)} —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ—Å—Ç—Ä–æ—á–Ω–æ...")
    
    for row_index, row_data in updated_entities:
        requests = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        for col_idx, cell_value in enumerate(row_data):
            user_value = {}
            if isinstance(cell_value, (int, float)):
                user_value = {"numberValue": float(cell_value)}
            elif cell_value is None or cell_value == '':
                user_value = {"stringValue": ""}
            else:
                user_value = {"stringValue": str(cell_value)}

            requests.append({
                "updateCells": {
                    "range": {
                        "sheetId": worksheet.id,
                        "startRowIndex": row_index - 1,  # 0-based
                        "endRowIndex": row_index,
                        "startColumnIndex": col_idx,
                        "endColumnIndex": col_idx + 1
                    },
                    "rows": [{
                        "values": [{
                            "userEnteredValue": user_value
                        }]
                    }],
                    "fields": "userEnteredValue"
                }
            })
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if requests:
            await spreadsheet.batch_update({"requests": requests})
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updated_entities)} —Å—É—â–Ω–æ—Å—Ç–µ–π")

async def upload_entities_to_google_sheets(portal_data: Dict, portal_config: Dict):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ Google Sheets."""
    portal_url = portal_config.get('url', 'Unknown')
    spreadsheet_id = portal_config.get('googlespreadsheet_id', '')
    
    if not spreadsheet_id:
        print(f"‚ö†Ô∏è  –î–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portal_url} –Ω–µ —É–∫–∞–∑–∞–Ω ID Google Sheets. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return

    print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portal_url} –≤ Google Sheets...")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    headers, rows = prepare_entities_data(portal_data)
    if not rows:
        print("üìù –ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
    client = await get_google_sheets_client()
    spreadsheet = await client.open_by_key(spreadsheet_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–°—É—â–Ω–æ—Å—Ç–∏"
    worksheet = await get_or_create_worksheet(spreadsheet, "–°—É—â–Ω–æ—Å—Ç–∏")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    sheet_info = await analyze_existing_worksheet(worksheet)
    existing_headers = sheet_info['existing_headers']
    existing_data = sheet_info['existing_data']
    is_new_sheet = sheet_info['is_empty'] and not existing_headers

    if is_new_sheet:
        # –ù–æ–≤—ã–π –ª–∏—Å—Ç: —Å–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        await apply_header_and_formatting(worksheet, headers, spreadsheet)
        await insert_entities_batch(worksheet, rows, spreadsheet)
        print(f"üéâ –ù–æ–≤—ã–π –ª–∏—Å—Ç '–°—É—â–Ω–æ—Å—Ç–∏' —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω {len(rows)} —Å—É—â–Ω–æ—Å—Ç—è–º–∏")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        if existing_headers != headers:
            await apply_header_and_formatting(worksheet, headers, spreadsheet)
            print("üîÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        else:
            print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        # –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        updated_entities = find_updated_entities(rows, existing_data)
        if updated_entities:
            await update_entities_row_by_row(worksheet, updated_entities, spreadsheet)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –±–∞—Ç—á–µ–º
        filtered_rows = filter_new_entities(rows, existing_data)
        if filtered_rows:
            await insert_entities_batch(worksheet, filtered_rows, spreadsheet)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(filtered_rows)} –Ω–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç")
        else:
            print("üìù –ù–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç")

async def upload_entities_to_google_sheets_all_portals(all_portals_data: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    portals = load_portal_configs()
    tasks = []
    
    for portal_config in portals:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞ –ø–æ URL
        portal_url = portal_config.get('url', '')
        portal_name = None
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞
        for name, data in all_portals_data.items():
            if name in portal_url or portal_url.endswith(name):
                portal_name = name
                break
        
        if portal_name and portal_name in all_portals_data:
            portal_data = all_portals_data[portal_name]
            task = upload_entities_to_google_sheets(portal_data, portal_config)
            tasks.append(task)
        else:
            print(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portal_url} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if tasks:
        await asyncio.gather(*tasks)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "entities": [],
        "criteria": []
    }
    asyncio.run(upload_entities_to_google_sheets_all_portals(test_data))
