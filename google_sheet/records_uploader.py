import json
import gspread_asyncio
import gspread
from google.oauth2.service_account import Credentials
from typing import Dict, List, Tuple
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
SERVICE_ACCOUNT_FILE = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', 'bitrix24/google_sheets_credentials.json')

async def get_google_sheets_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    agcm = gspread_asyncio.AsyncioGspreadClientManager(
        lambda: Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    )
    return await agcm.authorize()

def load_portal_configs() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–æ–≤ –∏–∑ bitrix24/bitrix_portals.json."""
    with open('bitrix24/bitrix_portals.json', 'r') as f:
        data = json.load(f)
        return data.get('portals', [])

def calculate_evaluation_from_record_data(record_criteria_data: List[Dict], criteria_metadata: List[Dict]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å evaluate_criterion=True –∏ include_in_score=True.
    
    :param record_criteria_data: –î–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ –∑–∞–ø–∏—Å–∏ (data['criteria'])
    :param criteria_metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã criteria
    :return: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –¥–æ –¥–µ—Å—è—Ç—ã—Ö
    """
    evaluations = []
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ ID
    criteria_meta_dict = {c['id']: c for c in criteria_metadata}
    
    for record_criterion in record_criteria_data:
        criterion_id = record_criterion.get('id')
        criterion_meta = criteria_meta_dict.get(criterion_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è
        if (criterion_meta.get('evaluate_criterion', False) and 
            criterion_meta.get('include_in_score', False)):
            
            eval_value = record_criterion.get('evaluation')
            if isinstance(eval_value, (int, float)):
                evaluations.append(eval_value)
    
    return round(sum(evaluations) / len(evaluations), 1) if evaluations else 0.0

def prepare_records_data(portal_data: Dict, spreadsheet_id: str = '', entities_sheet_gid: str = '0', entities_rows_map: Dict = None) -> Tuple[List[str], List[List]]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Sheets."""
    records = portal_data.get('records', [])
    users = portal_data.get('users', [])
    entities = portal_data.get('entities', [])
    criteria = portal_data.get('criteria', [])

    if not records:
        return [], []

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    users_dict = {u['id']: u for u in users}
    entities_dict = {e['id']: e for e in entities}

    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['id', 'date', 'phone_number', 'manager', 'entity_name', 'category', 'evaluation', 'dialogue', 'summary']

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    for criterion in criteria:
        criterion_name = criterion['name']
        headers.append(criterion_name)  # –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è
        if criterion.get('evaluate_criterion', False):
            headers.append('')  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –æ—Ü–µ–Ω–∫–∏

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É)
    sorted_records = sorted(records, key=lambda x: x.get('date', ''), reverse=False)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    rows = []
    for record in sorted_records:
        row = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        row.append(record.get('id', ''))
        row.append(record.get('date', ''))
        row.append(record.get('phone_number', ''))
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        user_id = record.get('user_id')
        manager_name = ''
        if user_id and user_id in users_dict:
            user = users_dict[user_id]
            name = user.get('name', '') or ''
            last_name = user.get('last_name', '') or ''
            manager_name = f"{name} {last_name}".strip()
        row.append(manager_name)
        
        # –ò–º—è —Å—É—â–Ω–æ—Å—Ç–∏ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ –ª–∏—Å—Ç "–°—É—â–Ω–æ—Å—Ç–∏" (title + name + lastname)
        entity_id = record.get('entity_id')
        entity_name = ''
        if entity_id and entity_id in entities_dict:
            entity = entities_dict[entity_id]
            title = entity.get('title', '') or ''
            name = entity.get('name', '') or ''
            lastname = entity.get('lastname', '') or ''
            name_parts = [part for part in [title, name, lastname] if part and part != 'None']
            display_name = ' '.join(name_parts) if name_parts else f'–°—É—â–Ω–æ—Å—Ç—å {entity_id}'
            
            # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –ª–∏—Å—Ç–µ "–°—É—â–Ω–æ—Å—Ç–∏"
            if spreadsheet_id and entities_rows_map and str(entity_id) in entities_rows_map:
                # –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å—É—â–Ω–æ—Å—Ç–∏ –≤ Google Sheets
                entity_row = entities_rows_map[str(entity_id)]
                full_url = f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}/edit#gid={entities_sheet_gid}&range=A{entity_row}"
                entity_name = {"formula": f'=HYPERLINK("{full_url}"; "{display_name}")'}
            else:
                entity_name = display_name
        row.append(entity_name)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ data['categories']
        data = record.get('data', {})
        categories_list = data.get('categories', [])
        category_name = categories_list[0].get('name', '') if categories_list else ''
        row.append(category_name)
        
        # –í—ã—á–∏—Å–ª—è–µ–º evaluation
        record_criteria_list = data.get('criteria', [])
        evaluation = calculate_evaluation_from_record_data(record_criteria_list, criteria)
        row.append(evaluation)
        
        # –¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        row.append(record.get('dialogue', '') or '')
        
        # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        row.append(record.get('summary', '') or '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        record_criteria_dict = {rc.get('id'): rc for rc in record_criteria_list}
        
        for criterion in criteria:
            criterion_id = criterion['id']
            record_criterion_data = record_criteria_dict.get(criterion_id, {})
            
            # –¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è (–µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
            text_value = record_criterion_data.get('text', '') if criterion.get('show_text_description', False) else ''
            row.append(text_value)
            
            # –û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if criterion.get('evaluate_criterion', False):
                eval_value = record_criterion_data.get('evaluation', '')
                row.append(eval_value if eval_value is not None else '')
        
        rows.append(row)

    return headers, rows

async def get_or_create_worksheet(spreadsheet, sheet_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    try:
        worksheet = await spreadsheet.worksheet(sheet_name)
        print(f"üìÑ –õ–∏—Å—Ç '{sheet_name}' –Ω–∞–π–¥–µ–Ω")
        return worksheet
    except gspread.exceptions.WorksheetNotFound:
        worksheet = await spreadsheet.add_worksheet(title=sheet_name, rows=100, cols=50)
        print(f"üìÑ –õ–∏—Å—Ç '{sheet_name}' —Å–æ–∑–¥–∞–Ω")
        return worksheet

async def analyze_existing_worksheet(worksheet) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤."""
    all_values = await worksheet.get_all_values()
    if not all_values:
        return {'is_empty': True, 'existing_headers': [], 'existing_data': []}

    existing_headers = all_values[0] if all_values else []
    existing_data = all_values[1:] if len(all_values) > 1 else []
    
    return {
        'is_empty': len(existing_data) == 0,
        'existing_headers': existing_headers,
        'existing_data': existing_data
    }

def filter_new_records(new_rows: List[List], existing_data: List[List]) -> List[List]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ (–ø–æ ID)."""
    if not existing_data:
        return new_rows

    existing_ids = {row[0] for row in existing_data if row and len(row) > 0}
    filtered_rows = []

    for row in new_rows:
        record_id = row[0] if row else None
        if record_id and record_id in existing_ids:
            continue
        else:
            filtered_rows.append(row)

    original_count = len(new_rows)
    filtered_count = len(filtered_rows)
    duplicate_count = original_count - filtered_count
    
    print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π: {original_count} –≤—Å–µ–≥–æ, {filtered_count} –Ω–æ–≤—ã—Ö, {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    return filtered_rows

async def apply_header_and_formatting(worksheet, headers: List[str], spreadsheet):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É."""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await worksheet.update('1:1', [headers])
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    requests = []
    
    # 1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∑–∞–ª–∏–≤–∫–∞ #e5e5e5)
    requests.append({
        "repeatCell": {
            "range": {
                "sheetId": worksheet.id,
                "startRowIndex": 0,
                "endRowIndex": 1,
                "startColumnIndex": 0,
                "endColumnIndex": len(headers)
            },
            "cell": {
                "userEnteredFormat": {
                    "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9},
                    "textFormat": {"bold": True}
                }
            },
            "fields": "userEnteredFormat(backgroundColor,textFormat)"
        }
    })
    
    # 2. –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    requests.append({
        "updateSheetProperties": {
            "properties": {
                "sheetId": worksheet.id,
                "gridProperties": {
                    "frozenRowCount": 1
                }
            },
            "fields": "gridProperties.frozenRowCount"
        }
    })
    
    # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞
    requests.append({
        "setBasicFilter": {
            "filter": {
                "range": {
                    "sheetId": worksheet.id,
                    "startRowIndex": 0,
                    "endRowIndex": 1000,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    "startColumnIndex": 0,
                    "endColumnIndex": len(headers)
                }
            }
        }
    })
    
    # 4. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é, –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é –∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
    requests.append({
        "repeatCell": {
            "range": {
                "sheetId": worksheet.id,
                "startRowIndex": 0,
                "endRowIndex": 1000,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                "startColumnIndex": 0,
                "endColumnIndex": len(headers)
            },
            "cell": {
                "userEnteredFormat": {
                    "horizontalAlignment": "LEFT",
                    "verticalAlignment": "TOP",
                    "wrapStrategy": "WRAP"
                }
            },
            "fields": "userEnteredFormat(horizontalAlignment,verticalAlignment,wrapStrategy)"
        }
    })
    
    # 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    column_widths = {
        'id': 150,
        'date': 150,
        'phone_number': 150,
        'manager': 150,
        'entity_name': 150,
        'category': 150,
        'evaluation': 150,
        'dialogue': 500,
        'summary': 250
    }
    
    for i, header in enumerate(headers):
        if header == '':
            # –ö–æ–ª–æ–Ω–∫–∞ –æ—Ü–µ–Ω–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            width = 50
        else:
            # –û–±—ã—á–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
            width = column_widths.get(header, 250)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 250 –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        
        requests.append({
            "updateDimensionProperties": {
                "range": {
                    "sheetId": worksheet.id,
                    "dimension": "COLUMNS",
                    "startIndex": i,
                    "endIndex": i + 1
                },
                "properties": {
                    "pixelSize": width
                },
                "fields": "pixelSize"
            }
        })
    
    # 6. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ —Å–ª–æ–≤–∞–º –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ dialogue
    dialogue_index = headers.index('dialogue') if 'dialogue' in headers else -1
    if dialogue_index >= 0:
        requests.append({
            "repeatCell": {
                "range": {
                    "sheetId": worksheet.id,
                    "startRowIndex": 0,
                    "endRowIndex": 1000,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    "startColumnIndex": dialogue_index,
                    "endColumnIndex": dialogue_index + 1
                },
                "cell": {
                    "userEnteredFormat": {
                        "wrapStrategy": "OVERFLOW_CELL"
                    }
                },
                "fields": "userEnteredFormat(wrapStrategy)"
            }
        })
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º batch-–∑–∞–ø—Ä–æ—Å
    await spreadsheet.batch_update({"requests": requests})
    print("üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: —à–∞–ø–∫–∞, —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫, —Ñ–∏–ª—å—Ç—Ä—ã, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ")

async def insert_records_batch(worksheet, rows: List[List], spreadsheet):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö."""
    if not rows:
        print("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return
    all_values = await worksheet.get_all_values()
    start_row = len(all_values) + 1 if all_values else 1

    # –†–∞—Å—à–∏—Ä—è–µ–º –ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    needed_rows = start_row + len(rows) - 1
    if needed_rows > worksheet.row_count:
        await worksheet.add_rows(needed_rows - worksheet.row_count)

    requests = []
    for row_idx, row in enumerate(rows):
        current_row = start_row + row_idx
        for col_idx, cell_value in enumerate(row):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
            user_value = {}
            if isinstance(cell_value, dict) and 'formula' in cell_value:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏)
                user_value = {"formulaValue": cell_value['formula']}
            elif isinstance(cell_value, (int, float)):
                user_value = {"numberValue": float(cell_value)}
            elif cell_value is None or cell_value == '':
                user_value = {"stringValue": ""}
            else:
                user_value = {"stringValue": str(cell_value)}

            requests.append({
                "updateCells": {
                    "range": {
                        "sheetId": worksheet.id,
                        "startRowIndex": current_row - 1,  # 0-based
                        "endRowIndex": current_row,
                        "startColumnIndex": col_idx,
                        "endColumnIndex": col_idx + 1
                    },
                    "rows": [{
                        "values": [{
                            "userEnteredValue": user_value
                        }]
                    }],
                    "fields": "userEnteredValue"
                }
            })

    # –í—ã–ø–æ–ª–Ω—è–µ–º batch-–∑–∞–ø—Ä–æ—Å –ø–æ —á–∞—Å—Ç—è–º (–ª–∏–º–∏—Ç API)
    if requests:
        chunk_size = 100  # –õ–∏–º–∏—Ç API
        for i in range(0, len(requests), chunk_size):
            chunk = requests[i:i + chunk_size]
            await spreadsheet.batch_update({"requests": chunk})
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ batch API")

async def get_entities_rows_map(spreadsheet, sheet_name: str) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É ID —Å—É—â–Ω–æ—Å—Ç–µ–π –∫ –Ω–æ–º–µ—Ä–∞–º —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ."""
    try:
        worksheet = await spreadsheet.worksheet(sheet_name)
        all_values = await worksheet.get_all_values()
        
        entities_map = {}
        if len(all_values) > 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row_idx, row in enumerate(all_values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                if row and len(row) > 0:
                    entity_id = row[0]  # ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                    entities_map[entity_id] = row_idx
        
        print(f"üó∫Ô∏è  –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è {len(entities_map)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
        return entities_map
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å—Ç—Ä–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
        return {}

async def upload_records_to_google_sheets(portal_data: Dict, portal_config: Dict):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets."""
    portal_url = portal_config.get('url', 'Unknown')
    spreadsheet_id = portal_config.get('googlespreadsheet_id', '')
    
    if not spreadsheet_id:
        print(f"‚ö†Ô∏è  –î–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portal_url} –Ω–µ —É–∫–∞–∑–∞–Ω ID Google Sheets. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return

    print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portal_url} –≤ Google Sheets...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
    client = await get_google_sheets_client()
    spreadsheet = await client.open_by_key(spreadsheet_id)

    # –ü–æ–ª—É—á–∞–µ–º gid –ª–∏—Å—Ç–∞ "–°—É—â–Ω–æ—Å—Ç–∏" –∏ –∫–∞—Ä—Ç—É —Å—Ç—Ä–æ–∫ –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫
    entities_sheet_gid = '0'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    entities_rows_map = {}
    try:
        entities_worksheet = await spreadsheet.worksheet("–°—É—â–Ω–æ—Å—Ç–∏")
        entities_sheet_gid = str(entities_worksheet.id)
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —Å—Ç—Ä–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        entities_rows_map = await get_entities_rows_map(spreadsheet, "–°—É—â–Ω–æ—Å—Ç–∏")
    except:
        pass  # –õ–∏—Å—Ç "–°—É—â–Ω–æ—Å—Ç–∏" –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º gid –∏ –∫–∞—Ä—Ç–æ–π —Å—Ç—Ä–æ–∫ –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫
    headers, rows = prepare_records_data(portal_data, spreadsheet_id, entities_sheet_gid, entities_rows_map)
    if not rows:
        print("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–ó–≤–æ–Ω–∫–∏"
    worksheet = await get_or_create_worksheet(spreadsheet, "–ó–≤–æ–Ω–∫–∏")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    sheet_info = await analyze_existing_worksheet(worksheet)
    existing_headers = sheet_info['existing_headers']
    existing_data = sheet_info['existing_data']
    is_new_sheet = sheet_info['is_empty'] and not existing_headers

    if is_new_sheet:
        # –ù–æ–≤—ã–π –ª–∏—Å—Ç: —Å–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        await apply_header_and_formatting(worksheet, headers, spreadsheet)
        await insert_records_batch(worksheet, rows, spreadsheet)
        print(f"üéâ –ù–æ–≤—ã–π –ª–∏—Å—Ç '–ó–≤–æ–Ω–∫–∏' —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω {len(rows)} –∑–∞–ø–∏—Å—è–º–∏")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        if existing_headers != headers:
            await apply_header_and_formatting(worksheet, headers, spreadsheet)
            print("üîÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        else:
            print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        filtered_rows = filter_new_records(rows, existing_data)
        if filtered_rows:
            await insert_records_batch(worksheet, filtered_rows, spreadsheet)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(filtered_rows)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç")
        else:
            print("üìù –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç")

async def upload_to_google_sheets(all_portals_data: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    portals = load_portal_configs()
    tasks = []
    
    for portal_config in portals:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞ –ø–æ URL
        portal_url = portal_config.get('url', '')
        portal_name = None
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞
        for name, data in all_portals_data.items():
            if name in portal_url or portal_url.endswith(name):
                portal_name = name
                break
        
        if portal_name and portal_name in all_portals_data:
            portal_data = all_portals_data[portal_name]
            task = upload_records_to_google_sheets(portal_data, portal_config)
            tasks.append(task)
        else:
            print(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portal_url} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if tasks:
        await asyncio.gather(*tasks)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "records": [],
        "users": [],
        "criteria": []
    }
    asyncio.run(upload_to_google_sheets(test_data))
