version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-callchecker_db}
      - POSTGRES_USER=${DB_USER:-callchecker}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-callchecker} -d ${DB_NAME:-callchecker_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - callchecker_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - callchecker_network
    command: redis-server --appendonly yes

  # Bitrix24 Main Service (загрузка звонков)
  bitrix-main:
    build: .
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-callchecker_db}
      - DB_USER=${DB_USER:-callchecker}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0

      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}

    volumes:
      - app_logs:/app/logs
      - audio_storage:/app/bitrix24/downloads
      - ./bitrix24/bitrix_portals.json:/app/bitrix24/bitrix_portals.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - callchecker_network
    command: python bitrix24/main.py
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('main.py' in p.info['cmdline'] for p in psutil.process_iter(['pid', 'cmdline'])) else 1)"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Dialogue Recognition Service (распознавание речи)
  dialogue-recognition:
    build: .
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-callchecker_db}
      - DB_USER=${DB_USER:-callchecker}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=${API_KEY}
      - SECRET_KEY=${SECRET_KEY}

      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}


    volumes:
      - app_logs:/app/logs
      - audio_storage:/app/bitrix24/downloads:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bitrix-main:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - callchecker_network
    command: python dialogue_recognition.py
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('dialogue_recognition.py' in p.info['cmdline'] for p in psutil.process_iter(['pid', 'cmdline'])) else 1)"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Dialog Analysis Service (анализ ИИ)
  dialog-analysis:
    build: .
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-callchecker_db}
      - DB_USER=${DB_USER:-callchecker}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}


    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dialogue-recognition:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - callchecker_network
    command: python dialog_analysis.py
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('dialog_analysis.py' in p.info['cmdline'] for p in psutil.process_iter(['pid', 'cmdline'])) else 1)"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Google Sheets Sync Service
  google-sheets-sync:
    build: .
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-callchecker_db}
      - DB_USER=${DB_USER:-callchecker}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_SHEETS_ENABLED=${GOOGLE_SHEETS_ENABLED:-true}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}

    volumes:
      - app_logs:/app/logs
      - ./bitrix24/google_sheets_credentials.json:/app/bitrix24/google_sheets_credentials.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dialog-analysis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - callchecker_network
    command: python google_sheet/google_sheets_synchronizer.py
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('google_sheets_synchronizer.py' in p.info['cmdline'] for p in psutil.process_iter(['pid', 'cmdline'])) else 1)"]
      interval: 60s
      timeout: 30s
      retries: 3

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  audio_storage:
    driver: local

# Network for service communication
networks:
  callchecker_network:
    driver: bridge
